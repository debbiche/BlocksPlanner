GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
[("pick",0),("drop",2),("pick",1),("drop",0)]
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
[("pick",0),("drop",2)]
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []

Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
Loading package integer-gmp ... linking ... done.  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
[("pick",1),("drop",2),("pick",1),("drop",0),("pick",2),("drop",0),("pick",2),("drop",1),("pick",2),("drop",0),("pick",1),("drop",2)]
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
[("pick",1),("drop",2),("pick",1),("drop",0),("pick",2),("drop",0),("pick",2),("drop",1),("pick",2),("drop",0),("pick",1),("drop",2)]  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help

<interactive>:3:5: parse error on input `,'
*World> planner initial_world final_world [] [[(initial_world, [])]] []
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help

<interactive>:3:5: parse error on input `,'
*World> planner initial_world final_world [] [[(initial_world, [])]] []
  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
GHCi, version 7.4.2: http://www.haskelules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
l.org/ghc/  :? for help  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
planner initial_world final_world [] [[(initial_world, [])]] []  <menu-bar> <signals> <kill>
Process haskell killed
:load "World.hs"
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> [1 of 1] Compiling World            ( World.hs, interpreted )

World.hs:58:19: parse error on input `]'
Failed, modules loaded: none.
Prelude> planner initial_world final_world [] [[(initial_world, [])]] []

<interactive>:3:1: Not in scope: `planner'

<interactive>:3:9: Not in scope: `initial_world'

<interactive>:3:23: Not in scope: `final_world'

<interactive>:3:41: Not in scope: `initial_world'
Prelude> planner initial_world final_world [] [[(initial_world, [])]] []

<interactive>:4:1: Not in scope: `planner'

<interactive>:4:9: Not in scope: `initial_world'

<interactive>:4:23: Not in scope: `final_world'

<interactive>:4:41: Not in scope: `initial_world'
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )

World.hs:70:20: parse error on input `]'
Failed, modules loaded: none.
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []


[("pick",2),("drop",9),("pick",2),("drop",1),("pick",9),("drop",1)]
*World> *World> *World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
*World> planner initial_world final_world [] [[(initial_world, [])]] []
[("pick",2),("drop",9),("pick",2),("drop",1),("pick",9),("drop",1)]
*World> :set +s
*World> planner initial_world final_world [] [[(initial_world, [])]] []
:load "World.hs"
[("pick",2),("drop",9),("pick",2),("drop",1),("pick",9),("drop",1)]
(514.39 secs, 84434262032 bytes)
*World> [1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 58421216 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.08 secs, 55938880 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 56889960 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 56751520 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )

World.hs:155:23: Not in scope: `initial_world'
Failed, modules loaded: none.
(0.01 secs, 10401752 bytes)
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 56855424 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )

World.hs:69:27: Not in scope: `world'
Failed, modules loaded: none.
(0.02 secs, 10400848 bytes)
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )

World.hs:69:27: Not in scope: `world'
Failed, modules loaded: none.
(0.01 secs, 10405656 bytes)
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 57954576 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )

World.hs:66:9: parse error on input `->'
Failed, modules loaded: none.
(0.00 secs, 2113240 bytes)
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.08 secs, 57373016 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 57389816 bytes)
*World> plan start_world end_world
[("pick",2),("drop",9),("pick",2),("drop",1),("pick",9),("drop",1)]
(537.04 secs, 84435783728 bytes)
*World> is_Valid start_world
True
(0.00 secs, 514104 bytes)
*World> is_Valid end_world
False
(0.00 secs, 514144 bytes)
*World> possible_action end_world

<interactive>:29:1:
    The function `possible_action' is applied to one argument,
    but its type `Plan' has none
    In the expression: possible_action end_world
    In an equation for `it': it = possible_action end_world
(0.00 secs, 0 bytes)
*World> possible_action end_world []

<interactive>:30:1:
    The function `possible_action' is applied to two arguments,
    but its type `Plan' has none
    In the expression: possible_action end_world []
    In an equation for `it': it = possible_action end_world []
(0.00 secs, 520216 bytes)
*World> build_plan end_world []
[(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Box Medium Red]],Grabber (Block Ball Medium Blue)),[("pick",9)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Ball Small Yellow)),[("pick",7)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Rectangle Wide Black)),[("pick",4)]),(World ([[],[Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Pyramid Large Green)),[("pick",1)])]
(0.01 secs, 2024296 bytes)
*World> length $ build_plan end_world []
4
(0.00 secs, 517312 bytes)
*World> length $ build_plan start_world []
5
(0.00 secs, 517240 bytes)
*World> length $ build_plan start_world []
5
(0.00 secs, 517792 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.08 secs, 57399832 bytes)
*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )

World.hs:162:1: Parse error: naked expression at top level
Failed, modules loaded: none.
(0.01 secs, 7865040 bytes)
Prelude> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 58382600 bytes)
*World> check_actions $ build_plan start_world []
[True,True,True,True,True*** Exception: World.hs:162:1-70: Non-exhaustive patterns in function check_actions

*World> :load "World.hs"
[1 of 1] Compiling World            ( World.hs, interpreted )
Ok, modules loaded: World.
(0.07 secs, 58427072 bytes)
*World> check_actions $ build_plan start_world []
[True,True,True,True,True]
(0.01 secs, 3168272 bytes)
*World> possible_action end_world []

<interactive>:41:1:
    The function `possible_action' is applied to two arguments,
    but its type `Plan' has none
    In the expression: possible_action end_world []
    In an equation for `it': it = possible_action end_world []
(0.00 secs, 0 bytes)
*World> possible_action end_world []

<interactive>:42:1:
    The function `possible_action' is applied to two arguments,
    but its type `Plan' has none
    In the expression: possible_action end_world []
    In an equation for `it': it = possible_action end_world []
(0.00 secs, 516496 bytes)
*Worlbuild_plan end_world []
[(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Box Medium Red]],Grabber (Block Ball Medium Blue)),[("pick",9)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Ball Small Yellow)),[("pick",7)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Rectangle Wide Black)),[("pick",4)]),(World ([[],[Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Pyramid Large Green)),[("pick",1)])]
(0.01 secs, 1547888 bytes)
*World> build_plan end_world []
[(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Box Medium Red]],Grabber (Block Ball Medium Blue)),[("pick",9)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Ball Small Yellow)),[("pick",7)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Rectangle Wide Black)),[("pick",4)]),(World ([[],[Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Pyramid Large Green)),[("pick",1)])]
(0.01 secs, 2060592 bytes)
*World> build_plan end_world []
[(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Box Medium Red]],Grabber (Block Ball Medium Blue)),[("pick",9)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Ball Small Yellow)),[("pick",7)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Rectangle Wide Black)),[("pick",4)]),(World ([[],[Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Pyramid Large Green)),[("pick",1)])]
(0.01 secs, 2023944 bytes)
*World> check_actions $ build_plan end_world []
[False,False,False,False]
(0.01 secs, 518816 bytes)
*World> build_plan end_world []
[(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Box Medium Red]],Grabber (Block Ball Medium Blue)),[("pick",9)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Ball Small Yellow)),[("pick",7)]),(World ([[],[Block Pyramid Large Green,Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Rectangle Wide Black)),[("pick",4)]),(World ([[],[Block Square Large Red,Block Ball Small White,Block Rectangle Tall Blue],[],[],[Block Rectangle Wide Black,Block Box Large White],[],[],[Block Ball Small Yellow,Block Box Large Red],[],[Block Ball Medium Blue,Block Box Medium Red]],Grabber (Block Pyramid Large Green)),[("pick",1)])]
(0.01 secs, 1542032 bytes)
*World> is_Valid end_world
False
(0.00 secs, 512200 bytes)
*World> g